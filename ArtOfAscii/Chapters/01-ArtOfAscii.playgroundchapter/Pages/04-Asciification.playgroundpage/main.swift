//#-hidden-code
//
// Copyright © 2020 Bunny Wong
// Created on 2019/12/18.
//

import UIKit
import PlaygroundSupport

import BookCore
import BookAPI

PlaygroundPage.current.needsIndefiniteExecution = true

let assessmentHelper = AssessmentHelper()

//#-end-hidden-code
/*:
# The “ASCIIfication” Magic

## Character Map

ASCII art can be generated by substituting pixels in different brightness levels with ASCII characters. To achieve
desired result, the font must be **monospaced**, which has fixed width for all characters.

Here is a **character map** built with font “Fira Code”, by arranging characters to fit a gradient from white to black.

![Character Map](character-map.jpg)

*/
//#-editable-code
let characterMapStr = "MWNXK0Okxdolc:;,'...   "
//#-end-editable-code
/*:
## Resampling

Since characters are much wider than pixels, images have to be shrunken the before mapping to ASCII characters.
Technically, scaling down an image is known as **downsampling** or broadly speaking, **resampling**. When scaling an
image, different *scaling algorithms* can applied. Most of them takes nearby pixels into consideration to produce a
smooth result.

### 🔬Scaling & Resampling

* Experiment:
    * Following code snippet shrinks an image according to the aspect ratio of characters.
    * Run the code and tap the *shrink* button to see the effect. Try tapping the buttonpir at the lower right corner,
    notice how pixels are resampled when scaling a small image up.
*/
//#-editable-code

// The aspect ratio of characters in the font “Fira Code”
let characterAspectRatio = 0.5860

var charactersPerRow = 80
var rowCount: Int!

func calculateRowCount(imageFormat: ImageFormat, charactersPerRow: Int) -> Int {
    let scaledHeight = Double(charactersPerRow) / imageFormat.aspectRatio
    return Int((scaledHeight * characterAspectRatio).rounded())
}

func scaleImageForAsciification(rawImage: RawImage) -> RawImage? {
    rowCount = calculateRowCount(imageFormat: rawImage.format, charactersPerRow: charactersPerRow)
    // Scale the image to match the dimension of resulting ASCII art.
    return rawImage.scaled(width: charactersPerRow, height: rowCount)
}

//#-end-editable-code
/*:
## Final Magic

### 🔨Mapping Pixels with Characters

* Experiment:
    * Following code snippet generates an ASCII art by mapping pixels to characters according to their brightness level.
    * Run this code and tap the *ASCIIfy* button to see experience the magic, feel free to tune all these parameters!
*/
//#-editable-code

func applyAsciification(rawImage: RawImage) -> UIImage? {
    let characterMap = [Character](characterMapStr)
    let maxMappedBrightness = Double(characterMap.count - 1)
    var asciificationResult: String = ""

    for y in 0..<rowCount {
        for x in 0..<charactersPerRow {
            if var pixel = rawImage.pixelAt(x: x, y: y) {
                let mappedBrightnessValue = pixel.brightness / 255.0 * maxMappedBrightness
                asciificationResult.append(characterMap[Int(mappedBrightnessValue.rounded())])
            }
        }
        asciificationResult += "\n"
    }

    return AsciiArtRenderer.renderAsciifiedImage(
            asciificationResult,
            fontName: FontResourceProvider.FiraCode.bold.rawValue,
            size: 14.0,
            foreground: UIColor.black,
            background: UIColor.white,
            charactersPerRow: charactersPerRow,
            rows: rowCount,
            characterAspectRatio: characterAspectRatio)
}

//#-end-editable-code
//#-hidden-code
FontResourceProvider.FiraCode.register()

let remoteView = remoteViewAsLiveViewProxy()
let eventListener = EventListener(proxy: remoteView) { message in
    switch message {
    case .shrinkingRequest(let image):
        guard let rawImage = RawImage(uiImage: image) else {
            return
        }
        let destinationBitmapInfo = CGBitmapInfo(rawValue: CGImageAlphaInfo.premultipliedLast.rawValue)
        if let destRawImage = scaleImageForAsciification(rawImage: rawImage),
           let destCGImage = destRawImage.cgImage(bitmapInfo: destinationBitmapInfo) {
            remoteView?.send(EventMessage.imageProcessingResponse(image: UIImage(cgImage: destCGImage)).playgroundValue)
        }
    case .asciificationRequest(let image):
        guard let rawImage = RawImage(uiImage: image) else {
            return
        }
        if let destImage = applyAsciification(rawImage: rawImage) {
            remoteView?.send(EventMessage.imageProcessingResponse(image: destImage).playgroundValue)
        }

        assessmentHelper.assessmentShowOnce({ true },
                pass: """
                      Congratulations! You've just created a wonderful ASCII Art and learned a lot about image processing.

                      Thanks for playing around! Let's stay tuned for WWDC20!
                      """)
    default:
        break
    }
}
//#-end-hidden-code
